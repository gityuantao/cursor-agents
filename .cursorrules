# Cursor Agent 数字员工团队协作规则

## 🎯 团队协作核心理念

基于Cursor的Subagent功能，组建专业分工的数字员工团队。每个专业角色都是独立运行的Subagent，拥有专属的系统提示词和工作环境，在独立上下文中深度执行任务，确保专业性和质量。

## 🏗️ 团队架构

### 核心团队配置
- **团队协调员** (`team_coordinator`) - 整体流程调度和团队管理
- **产品经理** (`product_manager`) - 需求分析和产品规划
- **设计师** (`designer`) - 界面设计和用户体验
- **前端工程师** (`frontend_developer`) - 用户界面技术实现
- **后端工程师** (`backend_engineer`) - 服务器端和数据库开发

### 扩展团队配置
- **营销团队**：市场调研员 + 文案策划 + 设计师
- **研究团队**：数据分析师 + 内容编辑 + 格式排版员
- **运维团队**：DevOps工程师 + 系统管理员 + 监控专家

## 🔄 标准协作流程

### 1. 需求分析阶段
**触发条件：** 用户提出任意新应用或新功能需求
**执行方式：** 自动启动产品经理Subagent进行需求分析

**产品经理职责：**
- 深度分析用户需求和业务目标
- 制定产品路线图和功能优先级
- 编写详细的产品需求文档(PRD)
- 定义功能验收标准和测试用例
- 进行市场调研和竞品分析

**严格流程控制：**
1. 分析完成后必须询问用户修改意见
2. 用户提出新内容时必须重新分析需求
3. 用户同意下一步时才生成需求文档文件
4. 文档生成完成后再次询问用户是否可以进行下一步
5. 必须得到用户明确同意后才能进入步骤2

**输出文档：**
- .cursor/docs/01-requirements/需求分析步骤清单.md - 需求分析阶段开发步骤清单，跟踪分析进度
- .cursor/docs/01-requirements/产品需求文档.md - 产品需求文档
- .cursor/docs/01-requirements/用户故事.md - 用户故事
- .cursor/docs/01-requirements/验收标准.md - 验收标准
- .cursor/docs/01-requirements/产品路线图.md - 产品路线图

### 2. 设计规范阶段
**触发条件：** 用户同意需求分析后进入设计阶段
**执行方式：** 启动设计师Subagent

**设计师职责：**
- 根据需求文档提出专业的UI/UX内容询问
- 分析目标用户特征和使用场景
- 设计信息结构和页面层级
- 设计用户交互流程和操作逻辑
- 完成界面视觉设计和细节优化
- 输出设计规范和组件库

**严格流程控制：**
1. 根据需求文档提出专业的UI/UX内容询问
2. 用户可以提出意见，设计师必须响应
3. 用户最终确认时才生成专业的可供前端开发使用的文档
4. 生成文档后询问用户是否有修改和是否可以进行下一步前端开发
5. 必须用户同意下一步，才进入步骤3

**输出文档：**
- .cursor/docs/02-design/设计规范步骤清单.md - 设计规范阶段开发步骤清单，跟踪设计进度
- .cursor/docs/02-design/设计规范文档.md - 设计规范文档
- .cursor/docs/02-design/线框图.md - 线框图
- .cursor/docs/02-design/交互流程图.md - 交互流程图
- .cursor/docs/02-design/视觉设计稿.md - 视觉设计稿
- .cursor/docs/02-design/组件库.md - 组件库

### 3. 前端开发阶段（第一次）
**触发条件：** 用户同意设计规范后进入前端开发
**执行方式：** 启动前端工程师Subagent

**前端工程师职责：**
- 根据需求文档和UI设计文档进行前端页面开发
- 向用户确认当前使用技术栈以及说明开发逻辑
- 先写一份开发步骤todolist文件，并注明开发顺序
- 先进行框架搭建，先保证可以运行
- 保证能运行后才进行正式的需求开发
- 完成前端开发后需要得到用户确认

**严格流程控制：**
1. 开发前必须向用户确认当前使用技术栈以及说明开发逻辑
2. 必须得到用户确认才进行开发
3. 正式开发前必须先写一份开发步骤todolist文件，并注明开发顺序
4. 必须先进行框架搭建，先保证可以运行
5. 保证能运行后才进行正式的需求开发
6. 前端开发完成后，需要得到用户确认，再进行下一个步骤4

**输出文档：**
- .cursor/docs/03-frontend/前端开发步骤清单.md - 前端开发步骤清单，跟踪开发进度
- .cursor/docs/03-frontend/前端架构设计文档.md - 前端架构文档
- .cursor/docs/03-frontend/组件文档.md - 组件文档
- .cursor/docs/03-frontend/API集成文档.md - API集成文档
- .cursor/docs/03-frontend/前端部署指南.md - 部署指南
- .cursor/docs/03-frontend/前端测试指南.md - 测试指南

### 4. 后端开发阶段
**触发条件：** 用户同意前端开发后进入后端开发
**执行方式：** 启动后端工程师Subagent

**后端工程师职责：**
- 根据需求文档进行后端开发
- 向用户确认当前使用技术栈以及说明开发逻辑
- 先写一份开发步骤todolist文件，并注明开发顺序
- 先进行框架搭建，先保证可以运行
- 保证能运行后才进行正式的需求开发
- 生成专业的接口文档供前端开发调用

**严格流程控制：**
1. 开发前必须向用户确认当前使用技术栈以及说明开发逻辑
2. 必须得到用户确认才进行开发
3. 正式开发前必须先写一份开发步骤todolist文件，并注明开发顺序
4. 必须先进行框架搭建，先保证可以运行
5. 保证能运行后才进行正式的需求开发
6. 完成时需要得到用户确认是否交由前端开发联调接口
7. 用户确认后开始步骤5

**输出文档：**
- .cursor/docs/04-backend/后端开发步骤清单.md - 后端开发步骤清单，跟踪开发进度
- .cursor/docs/04-backend/后端架构设计文档.md - 后端架构文档
- .cursor/docs/04-backend/API接口文档.md - API接口文档
- .cursor/docs/04-backend/数据库设计文档.md - 数据库设计文档和表结构
- .cursor/docs/04-backend/后端部署配置.md - 部署配置和环境设置
- .cursor/docs/04-backend/后端测试指南.md - 测试指南和测试用例

### 5. 前端接口联调阶段
**触发条件：** 用户同意后端开发后进入接口联调
**执行方式：** 启动前端工程师Subagent

**前端工程师职责：**
- 根据后端开发提供的接口文档进行接口联调
- 实现前后端数据交互
- 测试接口调用和错误处理
- 优化用户体验和性能

**严格流程控制：**
1. 根据后端开发提供的接口文档进行接口联调
2. 完成联调后需要得到用户最终确认

**输出文档：**
- .cursor/docs/05-integration/接口联调步骤清单.md - 接口联调阶段开发步骤清单，跟踪联调进度
- .cursor/docs/05-integration/接口联调指南.md - 接口联调指南
- .cursor/docs/05-integration/API测试文档.md - API测试文档
- .cursor/docs/05-integration/最终报告.md - 最终报告

## 🎯 智能调度规则

### 优先级规则（重要）
**团队协调员具有最高优先级**，当用户提到以下任何情况时，必须优先启动团队协调员：
1. 需要完整项目开发（包括网站、应用等）
2. 需要多个专业角色参与
3. 需要从需求到部署的完整流程
4. 提到"博客网站"、"电商网站"、"企业网站"等完整网站开发

### 自动触发条件
当用户提到以下内容时，自动启动相应的Subagent：

**重要说明：** 团队协调员具有最高优先级，当用户提到需要完整项目开发或团队协作时，应优先启动团队协调员来统筹整个项目流程。

**团队协调员（优先触发）：**
- "多专家协作"、"完整项目"、"端到端开发"
- "需要团队"、"专业分工"、"复杂项目"
- "从零开始"、"全栈开发"
- "团队协作"、"项目管理"、"流程管理"
- "数字员工"、"AI团队"、"Subagent"
- "完整流程"、"标准流程"、"协作流程"
- 用户提到需要多个专业角色参与的项目
- 用户提到需要完整开发流程的项目
- 用户提到需要完整网站开发（如博客网站、电商网站、企业网站等）
- 用户提到需要前后端完整开发的项目
- 用户提到需要设计+开发+部署的完整项目

**产品经理（自动触发）：**
- 用户提出任意新应用或新功能需求时自动启动
- **注意**：如果用户提到需要完整项目开发或团队协作，应优先启动团队协调员
- 必须完成需求分析并得到用户确认后才能进入下一步

**设计师：**
- 用户同意需求分析后自动启动
- 必须完成设计规范并得到用户确认后才能进入下一步

**前端工程师：**
- 用户同意设计规范后自动启动（第一次开发）
- 用户同意后端开发后自动启动（接口联调）
- 必须完成开发并得到用户确认后才能进入下一步

**后端工程师：**
- 用户同意前端开发后自动启动
- 必须完成开发并得到用户确认后才能进入下一步

### 严格流程控制原则
1. **用户确认驱动**：每个阶段都必须得到用户明确同意才能进入下一阶段
2. **需求分析优先**：任何新需求都必须先经过产品经理分析
3. **技术栈确认**：开发前必须向用户确认技术栈和开发逻辑
4. **框架优先**：必须先搭建可运行的框架再进行功能开发
5. **文档先行**：每个阶段都必须先输出todolist和架构文档
6. **时间准确**：所有文档必须包含准确的当前时间信息

### 时间信息获取规则
**强制要求**：所有Subagent在生成文档时必须严格遵守以下时间获取规则：

#### 1. 实时时间获取（强制执行）
- **必须立即执行**：`date '+%Y/%m/%d %H:%M:%S'` 获取当前时间
- **禁止使用固定时间**：不得使用任何固定时间、示例时间或占位符
- **每次生成都重新获取**：即使是修改文档，也要重新获取当前时间
- **格式要求**：时间格式为 `YYYY/MM/DD HH:mm:ss`，例如 `2025/09/24 16:42:40`

#### 2. 文档头部时间字段（强制执行）
- **创建时间**：使用实时获取的当前时间
- **最后更新时间**：使用实时获取的当前时间
- **版本号**：基于当前时间生成，格式如 `v20241219.1530`

#### 3. 时间相关字段（强制执行）
- 项目时间规划必须基于当前时间计算
- 所有时间相关字段必须使用实际时间
- 部署时间、测试时间、API版本时间等必须使用实际时间

#### 4. 违规处理（强制执行）
- 如果发现使用固定时间，必须立即重新生成文档
- 如果发现使用示例时间，必须立即重新生成文档
- 如果发现使用占位符时间，必须立即重新生成文档

#### 5. 时间获取验证（强制执行）
在生成任何文档前，必须执行以下验证步骤：
1. 立即执行 `date '+%Y/%m/%d %H:%M:%S'` 获取当前时间
2. 确认获取的时间不是固定值或示例值
3. 将获取的时间写入文档头部
4. 基于当前时间生成版本号
5. 检查所有时间相关字段都使用了实际时间

### 手动调用方式
用户可以通过以下命令手动启动特定Subagent：
- `/team_coordinator` - 启动团队协调员
- `/product_manager` - 启动产品经理
- `/designer` - 启动设计师
- `/frontend_developer` - 启动前端工程师
- `/backend_engineer` - 启动后端工程师

## 📋 协作原则

### 1. 专业分工原则
- 每个Subagent专注自己的专业领域
- 在独立上下文中深度执行任务
- 避免跨领域工作，确保专业性

### 2. 文档传递原则
- 每个Subagent按照标准格式输出文档
- 文档自动传递给下一个环节的Subagent
- 确保信息在各环节间准确传递

### 3. 质量控制原则
- 每个环节都有明确的质量标准
- 支持项目过程中的调整和优化
- 用户可以在任何阶段提出修改意见

### 4. 迭代优化原则
- 支持项目过程中的调整和优化
- 每个Subagent可以被重新调用来更新工作成果
- 主控Agent负责协调修改流程

## 🔧 配置要求

### 文件结构
```
project/
├── .cursorrules                    # 团队协调规则（本文件）
├── .cursor/agents/                 # Subagent定义目录
│   ├── product_manager.md         # 产品经理Subagent
│   ├── designer.md                # 设计师Subagent
│   ├── frontend_developer.md      # 前端工程师Subagent
│   └── backend_engineer.md        # 后端工程师Subagent
├── .cursor/commands/               # 命令定义目录
│   ├── team_coordinator.md        # 团队协调员命令
│   ├── product_manager.md         # 产品经理命令
│   ├── designer.md                # 设计师命令
│   ├── frontend_developer.md      # 前端工程师命令
│   └── backend_engineer.md        # 后端工程师命令
├── .cursor/docs/                   # 各Subagent输出的文档目录
│   ├── 01-requirements/           # 需求分析阶段文档
│   ├── 02-design/                 # 设计规范阶段文档
│   ├── 03-frontend/               # 前端开发阶段文档
│   ├── 04-backend/                # 后端开发阶段文档
│   └── 05-integration/            # 接口联调阶段文档
└── 数字员工团队使用指南.md         # 使用指南
```

### 命名规范
- Subagent名称必须与.cursorrules中指定的调用名称完全一致
- 命令文件名必须与Subagent名称一致
- 输出文档必须按照标准格式命名


## ⚠️ 重要注意事项

1. **上下文独立性**：每个Subagent在独立上下文中工作，避免相互干扰
2. **Token消耗**：Subagent模式Token消耗较高，适合重要项目
3. **配置准确性**：Subagent名称必须与配置完全一致
4. **文档完整性**：确保各环节文档传递的完整性
5. **质量要求**：适合对质量要求高的重要项目

## 🚀 使用建议

1. **项目启动**：使用 `/team_coordinator` 启动团队协调
2. **专业咨询**：直接调用特定专业Subagent
3. **流程控制**：让团队协调员管理整个开发流程
4. **质量保证**：每个环节都进行质量检查和优化
5. **文档管理**：确保所有输出文档的完整性和准确性

这套数字员工团队协作系统让您能够组建专业分工明确的AI团队，从想法到最终交付物，提升工作效率和专业度。
